<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Gezond Ouder Worden</title><link href="https://www.goboek.nl/" rel="alternate"></link><link href="https://www.goboek.nl/feeds/all-nl.atom.xml" rel="self"></link><id>https://www.goboek.nl/</id><updated>2015-09-23T01:00:00+02:00</updated><entry><title>BAndroid: How Google killed two-factor authentication</title><link href="https://www.goboek.nl/bandroid-how-google-killed-two-factor-authentication.html" rel="alternate"></link><published>2015-09-23T01:00:00+02:00</published><updated>2015-09-23T01:00:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2015-09-23:/bandroid-how-google-killed-two-factor-authentication.html</id><summary type="html">&lt;p&gt;A Android vulnerability called BAnderoid is found and described. This work was done by members of the VU University security research group.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Explain Like I'm 5&lt;/h1&gt;
&lt;p&gt;Do you know those banks that use text messages on your phone to double-check who you are when you want to do an transaction on their website with your account? It's extra safe, because people can't steal your phone. Wrong, it's not safe. If you're using an Android phone. It's bad. This post explains how and why.&lt;/p&gt;
&lt;p&gt;We do this so we can pressure Google into removing the feature from Android that makes this possible.&lt;/p&gt;
&lt;p&gt;Is that all you wanted to know? Ok. How about a FAQ?
&lt;a href="http://www.few.vu.nl/~vvdveen/bandroid.html"&gt;Here is the FAQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How about a video of a talk describing the problem in ful detail?&lt;/p&gt;
&lt;iframe class="youtube-player"
type="text/html"
width="640" height="385"
src="https://www.youtube.com/embed/7WiE0cpsxv4" allowfullscreen frameborder="0" cc_load_policy="1"&gt;
&lt;/iframe&gt;

&lt;h1&gt;What?&lt;/h1&gt;
&lt;p&gt;This post explains an interesting digital security development: the weakening of two-factor authentication using SMS in Android phones. I want to give more exposure to this bug in order to pressure Google to remove the feature that makes this vulnerability possible.&lt;/p&gt;
&lt;p&gt;Attackers can bypass SMS-based two-factor authentication on Android once the browser is hacked. They can do this by intercepting the SMS as it comes in, and then forwarding it to the attacker. The user never notices. There are big financial institutions that depend on this being secure. &lt;/p&gt;
&lt;h1&gt;The Research Group&lt;/h1&gt;
&lt;p&gt;At the VU University where I work, I am part of a computer systems security research group led by &lt;a href="http://www.cs.vu.nl/~herbertb"&gt;Herbert Bos&lt;/a&gt;. In 2014, one of the researchers, Victor van der Veen, discovered an interesting Android vulnerability that allows an attacker, with only a little manipulating of the user, to bypass two-factor authentication using SMS.&lt;/p&gt;
&lt;h1&gt;Background: Two-Factor Authentication&lt;/h1&gt;
&lt;p&gt;In the digital security world, there is a lot to do about authentication - proving who you are. That's good, because otherwise someone else could use systems as if they were you (such as: transfer your money away). We often talk about 3 factors that can be supplied to a system to prove your identity:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;something you know (such as: a password, or your mother's maiden name)&lt;/li&gt;
&lt;li&gt;something you have (such as: a metal key, or your phone)&lt;/li&gt;
&lt;li&gt;something you are (such as: your fingerprint, or the pattern on your iris)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many systems are content with just asking your login name and password. But passwords aren't really that great - if someone guesses it or steals it, it can be used to impersonate you. There's no warning that this has happened. And because everything is networked, the opportunities for people to steal your passwords are all over the place.&lt;/p&gt;
&lt;p&gt;If only a password is required, we call this one-factor authentication. If we require something else as well, we call this two-factor authentication. Such as: a password and a digital card. Or, a password and your phone. You can prove you have your own phone by typing in a SMS code that is sent to you. Someone who steals your password can't do this, because he hasn't stolen your phone and that's not easy to do over the internet.&lt;/p&gt;
&lt;p&gt;Because this raises the bar to forge someone's identity enormously, the more sensitive systems such as banks or the Dutch national Digital ID system &lt;a href="https://www.digid.nl/"&gt;DigiD&lt;/a&gt; require two factor authentication. Fortunately!&lt;/p&gt;
&lt;h1&gt;The Attack&lt;/h1&gt;
&lt;p&gt;Victor has devised a way that eliminates this factor. The scenario is as follows: somebody hacks into your browser. This is possible with many of the past, present and future security bugs in browsers. This is precisely the scenario that two-factor authentication is designed to thwart. What happens next?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The malicious code is able to forcibly install an app with any permissions on your Android phone remotely using your Google account. It can use your Google account because the browser can. You won't even notice the app is there.&lt;/li&gt;
&lt;li&gt;The app then has to be activated. This can be done by some very light manipulation, also without the user noticing. E.g., let the user click on a attacker-crafted url, in any context whatsoever, in the phone.&lt;/li&gt;
&lt;li&gt;From that point on, the app can silently intercept SMS messages. So the malicious code in the browser can trigger a bank login, the bank will send an SMS code to the phone, the app will transmit it to the attacking code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Presto. You can log in without stealing someone's phone.&lt;/p&gt;
&lt;p&gt;For full details, see the FAQ and video above.&lt;/p&gt;
&lt;h1&gt;The Result&lt;/h1&gt;
&lt;p&gt;Someone who breaks into your browser doesn't need to steal your phone over the internet any more
in order to log in as you.&lt;/p&gt;
&lt;h1&gt;The Google&lt;/h1&gt;
&lt;p&gt;Officially, Google has largely brushed off this concern. (See more details in the FAQ.) They claim it
works as designed. We want this changed.&lt;/p&gt;
&lt;h1&gt;The Press&lt;/h1&gt;
&lt;p&gt;The &lt;a href="http://www.volkskrant.nl/tech/lek-op-android-telefoons-door-beveiliging-google~a4089416/"&gt;Dutch national press&lt;/a&gt; &lt;a href="http://www.nu.nl/mobiel/4076742/onderzoekers-vu-ontdekken-lek-in-android-telefoons.html"&gt;was interested&lt;/a&gt;, but we want more attention for this vulnerability in order to increase the pressure on Google.&lt;/p&gt;
&lt;h1&gt;The FAQ&lt;/h1&gt;
&lt;p&gt;For further information, please see more description and answers to common question &lt;a href="http://www.few.vu.nl/~vvdveen/bandroid.html"&gt;in the FAQ&lt;/a&gt; maintained by Victor.&lt;/p&gt;</content><category term="Blog"></category><category term="android"></category><category term="security"></category></entry><entry><title>Exciting RTEMS GSOC projects for beagle announced</title><link href="https://www.goboek.nl/exciting-rtems-gsoc-projects-for-beagle-announced.html" rel="alternate"></link><published>2015-06-03T23:50:00+02:00</published><updated>2015-06-03T23:50:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2015-06-03:/exciting-rtems-gsoc-projects-for-beagle-announced.html</id><summary type="html">&lt;p&gt;A new RTEMS project - GSOC 2015!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Google Summer of Code 2015 has started. RTEMS is a participating
organisation, and the set of accepted proposals was just announced
some time ago. And it's a big deal. Not in the least for the RTEMS
Beagle support!&lt;/p&gt;
&lt;h1&gt;Google Summer of Code Projects&lt;/h1&gt;
&lt;p&gt;Google Summer of Code is a Google-sponsored program intended to get
people into the world of open source. Google pays a stipend to let
a student work on an open source project in the summer holidays.
The project is with an open source organisation ('org' in GSOC
parlance). The student then needn't take a summer job but learns
about how contributing to open source works instead.&lt;/p&gt;
&lt;p&gt;Participating in the community, proposing ideas and designs and
working with the community to implement them and merge them with
the project is all part of the experience. This is done under the
guidance of a org-appointed mentor. The mentor knows the org and
the project well enough to guide the students through this process.
Hopefully, the students will stay and continue to contribute to the
project after GSOC is over.&lt;/p&gt;
&lt;h1&gt;Coding has started&lt;/h1&gt;
&lt;p&gt;As the GSOC 2015 Timeline shows, coding has started. At RTEMS we
have weekly IRC meetings with students &amp;amp; mentors at which students
present their progress, sticking points, and plans for the next
week.&lt;/p&gt;
&lt;h1&gt;I am mentoring&lt;/h1&gt;
&lt;p&gt;I am co-mentoring 3 projects. And I'm very excited about their
potential. A full table of projects is in the tracking table on the
RTEMS GSOC page.&lt;/p&gt;
&lt;h1&gt;Beagleboard.org is generously donating&lt;/h1&gt;
&lt;p&gt;Jason Kridner of Beagleboard.org has contacted us and stated that
Beagleboard.org will donate a Beaglebone Black to students working
on Beaglebone projects for GSOC, even for non-Beagleboard org GSOC
projects. He has shipped all 3 students working on the RTEMS Beagle
BSP a Beaglebone Black. Fantastic initiative! We're grateful to
Beagleboard for this contribution and I hope it will benefit the
students greatly, in their GSOC project and afterwards.&lt;/p&gt;
&lt;h1&gt;Beagle peripheral improvement by Ketul Shah&lt;/h1&gt;
&lt;p&gt;Ketul is going to be improving peripheral support for the Beagle
BSP. He already has a lot of GPIO functionality working and we are
working on making a nice clean GPIO API that is sufficiently general
to be a BSP-independent API for GPIO for RTEMS. We intend to align
it with the Raspberry Pi GPIO API as well, i.e. make it actually
generic for those two BSPs already. That would be quite an advanced
contribution for a GSOC project in itself!  Beagle peripheral
improvement by Ragunath&lt;/p&gt;
&lt;p&gt;Ragunath's first priority is going to be getting an Ethernet driver
working for the Beaglebones. He will be using the FreeBSD code and
RTEMS' libbsd to build it. He already has it building and interfacing
to the hardware to a great extent, very impressive rate of progress!
Ethernet functionality will really help the BSP grow up tremendously.&lt;/p&gt;
&lt;h1&gt;BSD-licensed bootloader by Jarielle Catbagan&lt;/h1&gt;
&lt;p&gt;Jarielle is working on a BSD (or similarly liberal) licensed
bootloader for the Beagle BSP. Currently booting an RTEMS image for
the Beagles relies on uboot which is GPL-licensed. Unfortunately
the GPL is a big problem for many users and clients of RTEMS and
RTEMS prefers to provide a full set of software that will get you
from poweron to running RTEMS without a license that is something
of a liability. Jarielle is already very far with building &amp;amp; running
Micromonitor on the Beaglebone so that is very encouraging. We're
lucky to have Ed Sutter, author of umon, to co-mentor this project.&lt;/p&gt;
&lt;p&gt;Uboot is part of the reason some Beagle changes (in the rtems tools
and rtems source builder repositories) aren't fully merged yet with
mainline. A significant side-effect of this project is hopefully
to provide a full boot without uboot and merge the result with rtems
tools and rtems source builder.&lt;/p&gt;
&lt;h1&gt;Big changes&lt;/h1&gt;
&lt;p&gt;All of these projects together will bring about a big improvement
to the Beagle BSP on RTEMS. The Beagle BSP has attracted quite some
attention to RTEMS which is great. Making it more fully featured
and within just a few months is just fantastic. I'm thrilled to be
a part of it.&lt;/p&gt;</content><category term="Blog"></category><category term="rtems"></category><category term="gsoc"></category></entry><entry><title>Minix 3.3.0 is released, is unforking, and is visiting EuroBSDcon 2014</title><link href="https://www.goboek.nl/minix-330-is-released-is-unforking-and-is-visiting-eurobsdcon-2014.html" rel="alternate"></link><published>2014-09-24T23:50:00+02:00</published><updated>2014-09-24T23:50:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-09-24:/minix-330-is-released-is-unforking-and-is-visiting-eurobsdcon-2014.html</id><summary type="html">&lt;p&gt;Some background on the Minix 3.3.0 release and the Minix delegation to EuroBSDcon 2014 in Sofia.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Minix 3.3.0 and building up to that&lt;/h1&gt;
&lt;p&gt;A little over a week ago, Minix 3.3.0 &lt;a href="http://www.minix3.org/330.html"&gt;was
announced&lt;/a&gt;.  It is the culmination
of a lot of hard work over the past 1.5 year or so.&lt;/p&gt;
&lt;p&gt;Notable is that in that period we took the tough decision to break
the userland ABI. This is a big no-no in OS circles of course.
Nevertheless it was decided the tradeoff was positive. We could make
a lot of changes to make the userland more like NetBSD without
worrying about compatability - often the source of a lot of work
and complexity. We broke a lot of things in once so the pain is
felt just once. As a result many things are cleaner and more like
NetBSD now, and more future-proof; things like bigger C types (off_t,
time_t, and several others) and a bigger IPC message (64 bytes instead
of 36 bytes).&lt;/p&gt;
&lt;p&gt;There are many more improvements in 3.3.0, such as the first good
multi-architecture release - x86 and ARM. All in all a huge leap from
where we were 1.5 years ago and I'm proud of it.&lt;/p&gt;
&lt;h1&gt;Something supernatural happened - we are unforking from NetBSD&lt;/h1&gt;
&lt;p&gt;Something very unusual happened in this Minix release. It was another
huge leap in adopting the NetBSD code and infrastructure. The imported
code is so clean w.r.t. NetBSD now that we have adopted the NetBSD
hierarchy completely with the exception of a top-level minix/ directory.
So in a way, we are &lt;em&gt;merging&lt;/em&gt; with NetBSD. The &lt;em&gt;opposite&lt;/em&gt; of forking.
So we are challenging not only the common movement in open source,
which is to fork, but also the second law of thermodynamics. Admittedly
we are putting in a lot of energy to make this happen, but still. We
are &lt;em&gt;unforking&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Not only in source but also in real life: EuroBSDcon 2014&lt;/h1&gt;
&lt;p&gt;Not only are we meeting in source, we are also 
meeting in real life at EuroBSDcon 2014. AST is
&lt;a href="http://2014.eurobsdcon.org/talks-and-schedule/talks/#AndrewTanenbaum"&gt;giving a talk&lt;/a&gt; with technical updates on our journey in BSD land. Myself and Lionel
are there. In fact I am typing this while about to board my flight to Sofia.&lt;/p&gt;
&lt;p&gt;I'm looking forward greatly to the conference, attending talks and meeting
BSD folks. See you all there!&lt;/p&gt;</content><category term="Blog"></category><category term="minix"></category><category term="bsd"></category></entry><entry><title>Beagleboard xM, Beaglebone black and everything else RTEMS on the Beagles</title><link href="https://www.goboek.nl/beagleboard-xm-beaglebone-black-and-everything-else-rtems-on-the-beagles.html" rel="alternate"></link><published>2014-07-22T09:15:00+02:00</published><updated>2014-07-22T09:15:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-07-22:/beagleboard-xm-beaglebone-black-and-everything-else-rtems-on-the-beagles.html</id><summary type="html">&lt;p&gt;How to get everything RTEMS running on everything Beagle from scratch.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Everything about RTEMS on Beagleboards &amp;amp; Beaglebones&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Beagleboard" src="https://www.goboek.nl/images/beagle.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Welcome to the 10th post!&lt;/p&gt;
&lt;p&gt;(Updated fri sep 25 2015 with 'requirements' section, especially for the console cable warning. you need a seperate cable for the BBB console on rtems. Shortly after: 64bit ubuntu vs 32bit ubuntu.)&lt;/p&gt;
&lt;p&gt;(Updated sun dec 27 2015 with changes to make RTEMS 4.12 work.)&lt;/p&gt;
&lt;h2&gt;Purpose of this post&lt;/h2&gt;
&lt;p&gt;Don't have anything RTEMS installed on your machine but want to get it running on the Beaglebone? Or curious about how it runs, but don't have the hardware and want to run it in an emulator? Read on.&lt;/p&gt;
&lt;p&gt;Who am I kidding. Everyone wants that!&lt;/p&gt;
&lt;p&gt;This post will show you in detail how to get RTEMS applications running from scratch on the BeagleBoard xM, Beaglebone and Beaglebone Black. Actually it should work on the original BeagleBoard too but I don't have that hardware to test it.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As faithful readers know, I am working on RTEMS support for the Beagleboard, Beaglebone and Beaglebone Black. There has been quite some interest in Beagle support for RTEMS on the RTEMS mailing lists recently, quite suddenly I thought. That made me decide to offer the current state of the BSP for merging with RTEMS mainline. The alternative is to keep polishing it and improving support out-of-tree. But that is better done from RTEMS mainline now.&lt;/p&gt;
&lt;p&gt;So as mentioned, the purpose of this post is to start from nothing RTEMS-specific and build everything needed to run an RTEMS app on your Beagle target. As you'll see it isn't labour-intensive.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Target Hardware: Beagleboard XM, Beaglebone white, or beaglebone black. Original Beagleboard (plain)  and beaglebone green should also work but I haven't personally tested that. If you don't have any hardware, you can also run the beagleboard xm in an emulator which will be built for you automatically in this procedure.&lt;/li&gt;
&lt;li&gt;Peripherals: a way to power the target (sometimes USB will do); a micro-sd card to boot from (beaglebones)&lt;/li&gt;
&lt;li&gt;Console cable: we talk to the target using a serial console. This is highly target-dependent.&lt;ul&gt;
&lt;li&gt;For the beagleboard XM, you need a way to talk to a regular db9 serial port.&lt;/li&gt;
&lt;li&gt;For the beaglebone white, you only need to connect a usb cable; the target UART is bridged to a USB serial device, VERY convenient.&lt;/li&gt;
&lt;li&gt;For the beaglebone black, you need a special ttl-logic-level rs232 to usb cable. The builtin USB is NOT functional other than for power under RTEMS. (USB OTG would have to be implemented in RTEMS for this to work.) See &lt;a href="http://beagleboard.org/support/faq#Serial"&gt;the official beagle faq, serial section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operating system: it shouldn't matter THAT much, but unfortunately it does. I've tested this on 64-bit Ubuntu. 32-bit Ubuntu has a reported problem (thank you Claudio Scordino) that was solved by building in 64-bit. Other OSes (FreeBSD etc) should work too but have minor build problems I hope to be able to fix in the future.&lt;/li&gt;
&lt;li&gt;pax is needed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Chris Johns helped guide the polishing of the BSP a lot when I first came
up with it (he didn't call it Ben and Chris's Big Beagleboard Adventure for
nothing!). Brandon Matthews asked a question about running RTEMS on the
Beaglebone once and has since been very patient and helpful in collaborating
to move the process along. Claas Ziemke
started the, as-yet unmerged, original Beagleboard BSP for GSoC in 2012.&lt;/p&gt;
&lt;h2&gt;About Where the Code Is&lt;/h2&gt;
&lt;p&gt;There are 3 repo's to be concerned with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The RTEMS Source builder, or RSB, which builds a bunch of tools and dependencies to build RTEMS itself&lt;/li&gt;
&lt;li&gt;RTEMS itself; hardware-specific code (the BSP's) and generic code (RTEMS core) (BSP is mainlined!)&lt;/li&gt;
&lt;li&gt;RTEMS tools. We use it to automatically execute the RTEMS test suite.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these repositories have work in them by me to support building
&amp;amp; testing the BSP. Currently they are not merged with RTEMS official
repositories. If and when they are, I will update this post to
reflect the official locations.&lt;/p&gt;
&lt;p&gt;Currently the BSP is mainlined, but the RSB and rtems-tools parts are not.&lt;/p&gt;
&lt;h2&gt;First: build the toolchain, uboot, qemu and supporting utilities&lt;/h2&gt;
&lt;p&gt;The toolchain is needed to actually compile code to run on the Beagles. Fortunately the &lt;a href="http://www.rtems.org/wiki/index.php/RTEMS_Source_Builder"&gt;RTEMS Source Builder&lt;/a&gt; provides a way to do this in an automated, repeatable fashion. Also called the RSB. I have added some packages to the RSB to facilitate testing and preparing an SD card image to boot and run on Beagle targets.&lt;/p&gt;
&lt;p&gt;This is combined in the bset 'beagle' and is all built with the following simple commands. We start by creating the directory all the RTEMS-specific stuff wil happen in, both binaries and sources. I am choosing $HOME/development/rtems/.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% mkdir -p development/rtems/sources&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% cd development/rtems/sources&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The RSB has bsets you can choose from which are a set of tools with all needed dependencies. There is a toolchain bset for instance. I added a beagle bset which contains the toolchain and all other utilities and software we need.&lt;/p&gt;
&lt;p&gt;Check you have the dependencies the RSB itself depends on. Go to the
&lt;a href="http://www.rtems.org/ftp/pub/rtems/people/chrisj/source-builder/source-builder.html#_host_setups"&gt;RTEMS Source Builder Host Setups&lt;/a&gt; section and look for your OS.
I've tested this on Ubuntu and FreeBSD and it doesn't quite go out-of-the-box otherwise.&lt;/p&gt;
&lt;p&gt;Now fetch the RSB.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% git clone -b beagle https://github.com/bengras/rtems-source-builder.git&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Cloning&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;rtems-source-builder&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Reusing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;existing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Counting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Compressing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="c"&gt;% (15/15), done.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4015&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reused&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Receiving&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="c"&gt;% (4015/4015), 2.96 MiB | 1.13 MiB/s, done.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Resolving&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deltas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="c"&gt;% (2361/2361), done.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First verify the basic dependencies are on the system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;% ./rtems-source-builder/source-builder/sb-check &lt;/span&gt;
&lt;span class="n"&gt;RTEMS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Builder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then build the beagle bset. We tell RSB to install the binaries under the $HOME/development/rtems/4.12 prefix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% cd rtems-source-builder/rtems&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% ../source-builder/sb-set-builder --log=beagle.txt --prefix=$HOME/development/rtems/4.12 devel/beagle.bset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ok, great. This will have built the toolchain with the right target, qemu, uboot, and some supporting utilities needed to prepare the SD card. They are all under $HOME/development/rtems/4.12. We will use these soon enough.&lt;/p&gt;
&lt;h2&gt;Next: build RTEMS, Beagle BSPs and test suite&lt;/h2&gt;
&lt;p&gt;Time for the main act - the RTEMS code itself. We enable the Beagle BSP, build all the RTEMS code. &lt;/p&gt;
&lt;p&gt;At configure time, we can specify any set of four Beagle sub-BSPs: beagleboard, beagleboardxm, beaglebonewhite and beagleboneblack. beaglebonewhite is the original beaglebone but it's sometimes called white to dis-ambiguate it. In the BSP code there are only two cases but hardware-specific changes might change that in the future; so we have 4 cases now so the usage needn't change.&lt;/p&gt;
&lt;p&gt;OK let's build the beagleboardxm and beagleboneblack BSPs!&lt;/p&gt;
&lt;p&gt;First set the $PATH to include the built tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;4.12&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now fetch the code (update nov 3rd: BSP is mainlined):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% git clone git://git.rtems.org/rtems rtems-src&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Counting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;460971&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Compressing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="c"&gt;% (90271/90271), done.&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;460971&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;372942&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reused&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;446440&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;360846&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Receiving&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;objects:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;100%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;(460971/460971),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;63.28&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;MiB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;568.00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Resolving&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;deltas:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;100%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;(372942/372942),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;done.&lt;/span&gt;
&lt;span class="n"&gt;Checking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;connectivity...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;done.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% cd rtems-src&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The bootstrap step to generate the configure files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% ./bootstrap; ./bootstrap -p&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% cd ..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configure everything, selecting the beagleboneblack and the beagleboardxm modes. We also tell it to build the full test suite (--enable-tests) and for this reason we make the console operate in polled mode, a requirement for the tests to be run. On this BSP that is accomplished by setting CONSOLE_POLLED=1 at configure time. The default is interrupt-driven mode.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% mkdir b-beagle ; cd b-beagle&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% CONSOLE_POLLED=1 ../rtems-src/configure --target=arm-rtems4.12 --enable-rtemsbsp=&amp;quot;beagleboneblack beagleboardxm&amp;quot; --enable-tests&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% make&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If all went according to plan, you have a bunch of .exe files in the $HOME/development/rtems/b-beagle/arm-rtems4.12/c hierarchy. The full set twice - once linked with the beagleboardxm BSP, and once with the beagleboneblack BSP.&lt;/p&gt;
&lt;h2&gt;Aside - How to run an ELF RTEMS image on a Beagle&lt;/h2&gt;
&lt;p&gt;Something that isn't actually so obvious. We have an ELF-formatted .exe file now. How will that be loaded and executed on our targets? That is highly target-specific, and out of scope for RTEMS itself. Somehow the hardware has to be initialized. The file has to be loaded into memory in the right place and with the right initialization. Then the cpu has to be sent there. All this is not done by RTEMS itself, it can't. Usually we rely on a bootloader to do this.&lt;/p&gt;
&lt;p&gt;There are many options, but to get started, this page shows you how to write an SD card with an RTEMS image and a boot loader on it, completely self-contained.&lt;/p&gt;
&lt;p&gt;Other options are netbooting (so you don't have to write an SD card every time you want to boot something else) or loading with JTAG (no SD card or bootloader needed at all).&lt;/p&gt;
&lt;p&gt;We need uboot and several other tools to prepare a partitioned  SD card with a filesystem on it.&lt;/p&gt;
&lt;p&gt;It would be a chore to make the user re-invent this all the time, so we rely on a script that is in the RTEMS tree already.&lt;/p&gt;
&lt;h2&gt;Run the test suite&lt;/h2&gt;
&lt;p&gt;To track whether all code actually performs as expected with this BSP, we can automatically run all the RTEMS tests. Every piece of test code is linked with this BSP and executed. These are currently 501 tests. Each one is considered a success (passed) if it displays the start and end banner as its output. &lt;/p&gt;
&lt;p&gt;It is a great correctness baseline to establish, as future regressions (whether caused by changes in the BSP itself or not) can then be automatically caught. We simulate this execution so the target hardware isn't required to run the test set.&lt;/p&gt;
&lt;p&gt;First we fetch RTEMS tools, containing the testing code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bbxm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bengras&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Earlier, the RTEMS source builder has fetched and built a lot of required tools to actually run a test. There is a script in the RTEMS tester tree that takes an RTEMS executable, processes it into an image that uboot will load (using objdump and mkimage), put it together with MLO and uboot on a filesystem, and write an SD card image with it.&lt;/p&gt;
&lt;p&gt;We can then simulate its execution with the Linaro fork of qemu, which emulates a beagleboard xM in software.&lt;/p&gt;
&lt;p&gt;This is invoked automatically for every test executable by the RTEMS beagleboardxm_qemu tester. Here we go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tester&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bbxm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bsp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;beagleboardxm_qemu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;4.12&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;beagle&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rtems4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;beagleboardxm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will (on my machine) run for 30 minutes, executing all the tests, with parallelism even, a very nice system. The output in my case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    Passed:   497
    Failed:     3
    Timeouts:   1
    Invalid:    0
    Total:    501
    Average test time: 0:00:03.534494
    Testing time     : 0:29:30.781935
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So there are a few tests I should still diagnose before the baseline is as clean as it should be. But a pretty good start I'd say!&lt;/p&gt;
&lt;h2&gt;Writing an SD card image for the Beaglebone Black&lt;/h2&gt;
&lt;p&gt;In the RTEMS source tree itself there is a similar script to the above that lets you write an SD card image with a specific RTEMS executable on it. Let's write one for the Beaglebone Black:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% cd $HOME/development/rtems/rtems-src/c/src/lib/libbsp/arm/beagle/simscripts&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% sh sdcard.sh $HOME/development/rtems/4.12 $HOME/development/rtems/b-beagle/arm-rtems4.12/c/beagleboneblack/testsuites/samples/hello/hello.exe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The script should give you a whole bunch of output, ending in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    Result is in bone_hello.exe-sdcard.img.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you go. dd that to an SD card .. (/dev/mmcblk0 in my case. careful!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;#&lt;/span&gt; dd if=bone_hello.exe-sdcard.img of=/dev/mmcblk0 bs=4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;.. and boot!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# picocom -b 115200 /dev/ttyUSB0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Boot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SPL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2014.04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;00015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gb4422bd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Apr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;spl_load_image_fat_os&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;


&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Boot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2014.04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;00015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gb4422bd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Apr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;I2C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;ready&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DRAM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MiB&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;NAND&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MiB&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MMC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;OMAP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SD&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MMC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OMAP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SD&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MMC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;readenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ethaddr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Validating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fuse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAC&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cpsw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;usb_ether&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Hit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;autoboot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mmc0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SD&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MMC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uEnv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;18.6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Loaded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uEnv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Importing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mmc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Checking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uenvcmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uenvcmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rtems&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;58629&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;5.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MiB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;## Booting kernel from Legacy Image at 80800000 ...&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;RTEMS&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;ARM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RTEMS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gzip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;compressed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;58565&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;57.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80000000&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;80000000&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Verifying&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Checksum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Uncompressing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;## Transferring control to RTEMS (at address 80000000) ...&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;RTEMS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Beagleboard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;am335x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt;


&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BEGIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TEST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HELLO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WORLD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TEST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HELLO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WORLD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The script needs to know whether it's for a Beagleboard xM or one of the
Beaglebones. This is to know which uboot to use. It will detect this from the
path the executable is in, so you have to specify the full path.&lt;/p&gt;
&lt;h2&gt;Running with the Beagleboard xM over JTAG&lt;/h2&gt;
&lt;p&gt;This is a slightly more advanced use. Connect a flyswatter or flyswatter2 to a Beagleboard xM and you can load and run RTEMS executables on it without any other dependencies - Beagle from scratch. No bootloader, nothing. You will need openocd for this.&lt;/p&gt;
&lt;p&gt;Still from the simscripts dir, first start openocd. I have a flywatter but you can also specify a flyswatter2.cfg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% cd $HOME/development/rtems/rtems-src/c/src/lib/libbsp/arm/beagle/simscripts&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;% openocd -f interface/ftdi/flyswatter.cfg -f bbxm.cfg -c&amp;#39;reset init&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;openocd should now be talking to your bbxm and be offering a gdb interface. Using gdb we can load and run RTEMS executables.&lt;/p&gt;
&lt;p&gt;Try it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # mkdir bbxm-gdb
    # cd bbxm-gdb 
    # cp ../gdbinit.bbxm .gdbinit
    # arm-rtems4.12-gdb $HOME/development/rtems/b-beagle/arm-rtems4.12/c/beagleboardxm/testsuites/samples/ticker/ticker.exe
    GNU gdb (GDB) 7.7
    -snip-
    Breakpoint 10 at 0x80015dcc: file ../../../../../../rtems-src/c/src/../../cpukit/libcsupport/src/newlibc_exit.c, line 37.
    (gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The executable is now ready to run but halted. Start with 'continue':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    (gdb) c
    Continuing.
    Breakpoint 10, _exit (status=0)
        at ../../../../../../rtems-src/c/src/../../cpukit/libcsupport/src/newlibc_exit.c:37
    37      {
    (gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The gdb interface is very powerful as the loading &amp;amp; running is convenient, full debug info is available,  breakpoints all work and the build &amp;amp; run cycle is very short.&lt;/p&gt;
&lt;h2&gt;Running the full test suite over JTAG&lt;/h2&gt;
&lt;p&gt;Doing the above in batch mode lets us run the full test suite on hardware, the only real test of course. We specify the beagleboardxm bsp insteadof the beagleboardxm_qemu bsp. This one will talk to gdb to load and run the executable each time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# cd $HOME/development/rtems/rtems-tools/tester&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# ./rtems-test --log=bbxm-jtag.log --report-mode=all --rtems-bsp=beagleboardxm --rtems-tools=$HOME/development/rtems/4.12 $HOME/development/rtems/b-beagle/arm-rtems4.12/c/beagleboardxm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is it! Everything RTEMS on Beagle!&lt;/p&gt;
&lt;h2&gt;What I've Tested&lt;/h2&gt;
&lt;p&gt;I have personally tested everything in the above procedure, i.e.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That building all the tools and utilities from scratch work, using the RTEMS Source Builder repository (Ubuntu + FreeBSD).&lt;/li&gt;
&lt;li&gt;That building the beaglebone and bbxm BSPs and linking them with all the testsuite programs works (Ubuntu + FreeBSD).&lt;/li&gt;
&lt;li&gt;That the beaglexm-emulating linaro qemu executes all of those tests properly, invoked using a single command line with the scripts in the RTEMS tools repository, even though not all pass currently (Ubuntu + FreeBSD).&lt;/li&gt;
&lt;li&gt;That loading &amp;amp; running over JTAG works, both interactively with gdb and in a batch using gdb and the test runner.&lt;/li&gt;
&lt;li&gt;That running RTEMS executables using u-boot on the beaglebones from sd card work; both with and without MMU enabled at RTEMS start time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, I've also tested the work by Claas Ziemke rebased on
current rtems mainline builds. My changes are in a separate commit in order
to preserve credit where it's due.&lt;/p&gt;
&lt;h2&gt;What's next&lt;/h2&gt;
&lt;p&gt;Gee don't put me on the spot!&lt;/p&gt;
&lt;p&gt;I want to diagnose the failure reasons of the tests in the emulator and on
hardware (different).&lt;/p&gt;
&lt;p&gt;Some form of continuous integration to keep verifying the BSP with future
commits would be a good idea too!&lt;/p&gt;
&lt;p&gt;Also I want to get JTAG working on the beaglebone white, which would be an
extremely powerful setup - console, power and jtag all over one USB cable?
God have mercy.&lt;/p&gt;
&lt;p&gt;When I'm feeling brave I'd like to get the ethernet hardware working on the
Beaglebones. But first things first. Let me know if you enjoy the BSP!&lt;/p&gt;</content><category term="Blog"></category><category term="beagle"></category><category term="beaglebone"></category><category term="beagleboard"></category><category term="rtems"></category></entry><entry><title>Nice solution to use PC as a Sonos audio source.</title><link href="https://www.goboek.nl/nice-solution-to-use-pc-as-a-sonos-audio-source.html" rel="alternate"></link><published>2014-05-23T15:46:00+02:00</published><updated>2014-05-23T15:46:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-05-23:/nice-solution-to-use-pc-as-a-sonos-audio-source.html</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;img alt="Embedded device" src="https://www.goboek.nl/images/Sonos-company.png"&gt;&lt;/p&gt;
&lt;p&gt;I'm a Sonos fan.&lt;/p&gt;
&lt;p&gt;I'm a big Sonos fan. The devices are quite costly so part of me is
&lt;em&gt;forced&lt;/em&gt; to be a big Sonos fan. But still I think the abilities,
and quality of the products more than earned my fandom. It's a
perfect home audio speakers solution.&lt;/p&gt;
&lt;p&gt;There is always something of course. In my case I occasionally
really want to broadcast some audio from my PC (e.g. an interview
on youtube) throughout my home. Sonos, quite stubbornly I think,
never implemented this (except for suggesting hooking up a PC to
a Sonos component Line-in input). Even though they lately do
offer to stream particular files from a mobile device, which is
close and a really nice feature too.&lt;/p&gt;
&lt;p&gt;To anyone looking for this feature - try this pretty slick solution I
found on a &lt;a href="https://ask.sonos.com/sonos/topics/allow_sonos_to_monitor_what_computer_is_streaming"&gt;Sonos forum post&lt;/a&gt;: install
&lt;a href="http://www.streamwhatyouhear.com/"&gt;streamwhatyouhear&lt;/a&gt;, make it
do a HTTP stream, and add that HTTP stream as a radio station in your
Sonos controller. Then play that station, and presto. Works really well.&lt;/p&gt;</content><category term="Blog"></category><category term="sonos"></category></entry><entry><title>Video of talk about real-time, embedded, software in space, and SMP threads scheduling.</title><link href="https://www.goboek.nl/video-of-talk-about-real-time-embedded-software-in-space-and-smp-threads-scheduling.html" rel="alternate"></link><published>2014-05-17T22:45:00+02:00</published><updated>2014-05-17T22:45:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-05-17:/video-of-talk-about-real-time-embedded-software-in-space-and-smp-threads-scheduling.html</id><summary type="html">&lt;p&gt;Dr Joel of RTEMS came to visit the VU University and gave a great talk on Embedded, Realtime, RTEMS and SMP. I made a video of it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Embedded device" src="https://www.goboek.nl/images/embedded.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Embedded device.&lt;/p&gt;
&lt;p&gt;Interested in embedded systems, real-time systems, or how the
software on satellites or on the Mars rover works, from someone
with many years of experience in this field? Joel has a talk just
for you.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rtemsramblings.blogspot.com/"&gt;Joel&lt;/a&gt; from
&lt;a href="http://www.rtems.org/"&gt;RTEMS&lt;/a&gt; came to the VU University in Amsterdam
to give a talk. The audience was a big group of &lt;a href="http://en.wikipedia.org/wiki/System_software"&gt;computer systems
researchers&lt;/a&gt; that
aren't necessarily experts in the field of embedded or realtime.&lt;/p&gt;
&lt;p&gt;It turns out the audience was perfect for it because the talk is a
great introduction to embedded and realtime; and also goes in-depth
when it comes to the unique challenges in SMP scheduling in that
area.&lt;/p&gt;
&lt;h2&gt;We recorded it&lt;/h2&gt;
&lt;p&gt;My friends at the office Lionel and Kees did audio and video recordings of
it. Joel gave me his slides. I transcribed the whole talk (i.e. subtitles)
to compensate for the audio being crummy in places. My friend Goran boosted
bits of the audio. And I edited it all together.&lt;/p&gt;
&lt;h2&gt;Contents briefly&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What is embedded?&lt;/li&gt;
&lt;li&gt;What is real-time?&lt;/li&gt;
&lt;li&gt;What is an operating system?&lt;/li&gt;
&lt;li&gt;What is an embedded, real-time, operating system?&lt;/li&gt;
&lt;li&gt;What is RTEMS? Where is it used?&lt;/li&gt;
&lt;li&gt;RTEMS architecture&lt;/li&gt;
&lt;li&gt;How are threads managed and scheduled in RTEMS?&lt;/li&gt;
&lt;li&gt;What changes when we start doing all this in SMP&lt;/li&gt;
&lt;li&gt;Audience questions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;My favourite part&lt;/h2&gt;
&lt;p&gt;Is Joel strutting his stuff in response to a question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nobody said these were easy. 
It's multithreaded, that's why we get the big bucks, right? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Watch it to see it!&lt;/p&gt;
&lt;h2&gt;Video&lt;/h2&gt;
&lt;p&gt;Here is the video. Enjoy!&lt;/p&gt;
&lt;iframe class="youtube-player"
type="text/html"
width="640" height="385"
src="https://www.youtube.com/embed/7Jh9PUSBPAY" allowfullscreen frameborder="0" cc_load_policy="1"&gt;
&lt;/iframe&gt;

&lt;h2&gt;PS About The Subtitles&lt;/h2&gt;
&lt;p&gt;I transcribed all of the subtitles and used the YouTube interface
to automatically do the timing for me. This was hit/miss. The first
version matched the first 70% of the video perfectly, but always
seemed to lose sync completely near the end - same for when the
first 50% or all of the video transcription was complete. The next
version had different audio and the sync was one big mess.&lt;/p&gt;
&lt;p&gt;So I used the first version, adjusted the timing for the new video
(the SRT file with timing info was available for download from
YouTube), and then was stuck with how to correct the timing for the
remaining 30 minutes or so. I call it 'stuck' because I found the
youtube interface for correcting these timings far too clumsy to
use in this manner. All I needed was displaying the subtitle, and
me correcting the timing by hitting a key every time I wanted a
transition to the next! Is that so hard? I would be done in the 30
minutes remaining of the video. It can't be done faster.
No of course it's not so hard, but
that doesn't mean existing tools have an obligation to anticipate
your use case, however easy it may be. I looked around but found no
subtitle tool, site or software that had implemented my scenario.&lt;/p&gt;
&lt;p&gt;Unfortunately the shortest path from my problem to the solution I
imagined was using Perl. I wrote a script to read the SRT file up
until the timing was wrong, copying over the entries to the output
file directly. From then I made it display each subtitle,
and wait for a keystroke for each transition; and rewrite
the SRT to use the new timings. Somewhat to my surprise, in actual
operation, this went perfectly the first time, start to finish.
Except for falling asleep once or twice while watching the video
again, it was pretty late. I'm not especially proud of the script
but I am a bit proud of solving the problem in a completely optimal way in terms of
execution time, with
fairly low effort in terms of programming time.&lt;/p&gt;</content><category term="Blog"></category><category term="rtems"></category></entry><entry><title>LLVM Bitcode, Minix Liveupdate, and Gold Bugs</title><link href="https://www.goboek.nl/llvm-bitcode-minix-liveupdate-and-gold-bugs.html" rel="alternate"></link><published>2014-05-04T22:45:00+02:00</published><updated>2014-05-04T22:45:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-05-04:/llvm-bitcode-minix-liveupdate-and-gold-bugs.html</id><summary type="html">&lt;p&gt;A story about the powerful possibilities of building code using LLVM bitcode; and a binutils gold bug I came across and fixed.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Lightning" src="https://www.goboek.nl/images/lightning.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The power of LLVM. Image: Rainer Knäpper&lt;/p&gt;
&lt;p&gt;Interested in adding a whole new dimension to existing everyday C code?
Or what it's like to be among the first of projects to be trying such
things with new tools and technologies, and having to fix a linker bug
to do it? Read on.&lt;/p&gt;
&lt;h2&gt;Introduction to LLVM&lt;/h2&gt;
&lt;p&gt;&lt;img alt="LLVM Dragon" src="https://www.goboek.nl/images/llvm-dragon-small.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.llvm.org/"&gt;LLVM&lt;/a&gt; is a full compiler infrastructure made to not
only compile various languages to various kinds of machine code, but also work with
code in other ways using re-usable components. Examples: an editor
that understands your code as you type (an IDE); a library that
lets you perform source-level transformations easily that are very
messy to do reliably at the text level; &lt;a href="http://clang.llvm.org/"&gt;Clang&lt;/a&gt;
is a C/C++ compiler built on LLVM that can generate machine code
for many architectures, including i386 and ARM;
&lt;a href="http://klee.github.io/klee/"&gt;Klee&lt;/a&gt;, which simulates many executions
of programs with unspecified inputs; and so on.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.llvm.org/pubs/2008-10-04-ACAT-LLVM-Intro.pdf"&gt;More complete intro in PDF format here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Introduction to LLVM Bitcode&lt;/h2&gt;
&lt;p&gt;At the core of how LLVM works is its Intermediate Representation,
or IR, or bitcode. It represents the logic of the program after
translation from the input language. So it describes the intended
action of the program independent of a particular target architecture.
Such bitcode files can be linked together to form the bitcode
representation of the final executable program.&lt;/p&gt;
&lt;h2&gt;Powerful applications of LLVM Bitcode&lt;/h2&gt;
&lt;p&gt;This allows some powerful reasoning over complete programs at a higher
abstraction level than machine code. Example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://klee.github.io/klee/"&gt;Klee&lt;/a&gt; makes use of this. It is
    able to &lt;em&gt;symbolically execute&lt;/em&gt; a program. It simulates
    running a program without knowing what inputs it will receive
    (I/O results, program arguments, etc.). Such unknowns are treated
    symbolically and Klee tries to find execution paths and input
    values that cause unwanted states (e.g. bad pointer dereference
    or an assertion failing). A nice demonstration of KLEE's reasoning powers
    is making it
    &lt;a href="http://feliam.wordpress.com/2010/10/07/the-symbolic-maze/"&gt;solve a maze&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For a demonstration combining another powerful form of abstraction with
    LLVM bitcode: based on his work with
    &lt;a href="http://wiki.netbsd.org/rumpkernel/"&gt;RUMP kernels&lt;/a&gt;,
    Antti Kantee was able to use
    &lt;a href="https://github.com/kripken/emscripten/wiki"&gt;emscripten&lt;/a&gt; to translate his kernels to Javascript.
    The result is &lt;a href="https://blog.netbsd.org/tnf/entry/kernel_drivers_compiled_to_javascript"&gt;the NetBSD kernel booting in javascript&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not only has analyzing programs become possible; also transforming them
before the machine code is generated. This has powerful applications.
Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All kinds of code instrumentation.&lt;/li&gt;
&lt;li&gt;Link-time optimisation. Optimisation is generally done at compile
    time, so on a per-file basis; but the compiler is actually quite limited
    in what it can do and what information it has available at this scope.
    Examples: leaving out dead code; inlining functions that are defined
    in a different file; having a better estimate of how many times 
    functions are called. These are all things that are impossible at the
    file level but possible at link time. Needless to say, the possibilities to improve
    on time- and space-optimisation this way are near-endless.&lt;/li&gt;
&lt;li&gt;Introspection. This makes available information about functions and
    variables of the current (or another!) C program in the form of regular
    C datastructures, allowing operations at runtime that are otherwise
    impossible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Minix and Liveupdate&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.minix3.org/"&gt;Minix&lt;/a&gt; is close to supporting being built
with bitcode completely. The code is ready on a working branch,
just not merged with mainline yet. This allows for many powerful
features such as LTO, introspection, running KLEE etc. to be applied
to its codebase - userland and OS components alike.&lt;/p&gt;
&lt;p&gt;The driving force behind building Minix with bitcode is the Liveupdate
project spearheaded by &lt;a href="http://www.cs.vu.nl/~giuffrida/"&gt;Cristiano Giuffrida&lt;/a&gt;.
His Ph.D thesis topic is the implementation of the updating of OS components
to newer versions while they are in use. It uses information obtained from
LLVM bitcode to make this possible. More details are in his Liveupdate papers here on
his &lt;a href="http://www.cs.vu.nl/~giuffrida/"&gt;homepage&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Minix is unique&lt;/h2&gt;
&lt;p&gt;Minix is unique in more ways than one. However, having this available
as a maintained feature in the codebase means Minix is in a position
to offer a powerful extra level of code analysis and instrumentation;
for applications known (such as LTO) and to be invented.  It is the
first and so far only operating system that supports full bitcode
builds in the base system!&lt;/p&gt;
&lt;p&gt;The future holds more promise - LLVM-based instrumentation supports
more projects in Minix that Cristiano is working on - memory
checkpointing for crash recovery, address space layout randomization,
and fault injection.&lt;/p&gt;
&lt;h2&gt;Gold bugs&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Gold bug" src="https://www.goboek.nl/images/goldbug.jpg"&gt;&lt;/p&gt;
&lt;p&gt;To link bitcode files and perform transformations on them at link
time, the &lt;a href="http://en.wikipedia.org/wiki/Gold_%28linker%29"&gt;Binutils Gold linker&lt;/a&gt;
is required. Unfortunately we at Minix ran into a few problems and bugs when linking
everything with Gold.&lt;/p&gt;
&lt;p&gt;The most recent one &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=16900"&gt;I recently fixed and submitted a fix upstream
for&lt;/a&gt;. It was
quite a trip down the rabbit hole to find that one from just the
symptoms of a crashing runtime linker! I really like being able to
contribute such a fix to a project upstream that we make heavy use of -
it's a way to give back and raise the profile of Minix a little.&lt;/p&gt;
&lt;p&gt;Also the fact that we ran into these problems suggests that Minix is
unusual, perhaps unique, in supporting bitcode builds in its own codebase.
And therefore is a uniquely enticing platform to do OS-level LLVM transform
experimentation on.&lt;/p&gt;
&lt;h2&gt;Now what?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://llvm.org/ProjectsWithLLVM/"&gt;More LLVM-bsed projects here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;My thanks to &lt;a href="http://www.cs.vu.nl/~giuffrida/"&gt;Cristiano Giuffrida&lt;/a&gt; who
kindly reviewed a draft of this post and substantially improved upon it.
Any errors are still mine of course.&lt;/p&gt;</content><category term="Blog"></category><category term="llvm"></category><category term="minix"></category></entry><entry><title>Beagle from scratch, or: adventures in JTAG, part 1</title><link href="https://www.goboek.nl/beagle-from-scratch-or-adventures-in-jtag-part-1.html" rel="alternate"></link><published>2014-04-26T15:11:00+02:00</published><updated>2014-04-26T15:11:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-04-26:/beagle-from-scratch-or-adventures-in-jtag-part-1.html</id><summary type="html">&lt;p&gt;Executing code on a BeagleBoard XM without any bootcode.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Below is a story of what I've learned about what it takes to
boot a &lt;a href="http://beagleboard.org/Products/BeagleBoard-xM"&gt;Beagleboard&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;BeagleBoard XM on reset - a barren wasteland&lt;/h2&gt;
&lt;p&gt;Without boot code such as &lt;a href="http://www.denx.de/wiki/U-Boot"&gt;U-Boot&lt;/a&gt;
running first, very little is actually working. Most noticeably,
there is no usable UART or external RAM, and quite a lot of
initialization is necessary before they are both in a usable state.
The only available RAM is 128kB that is on the SOC itself. There is
also some ROM that contains code which is the first thing that
starts executing on reset.&lt;/p&gt;
&lt;h2&gt;How initialization can be done&lt;/h2&gt;
&lt;p&gt;The usual case is that on reset, the ROM boot code searches boot
devices to find the second-stage bootcode to be executed from the
128kB RAM. Its only task is to initialize RAM and other necessary
peripherals so that the next stage bootloader can be loaded and
executed. This executable is called MLO in TI parlance and it
can be fulfilled by an SPL build of U-Boot. The ROM boot code
is smart enough to parse a partition table and FAT filesystem
and load the MLO to the 128kB on-SOC RAM if there is an MLO on
the MMC. Other boot devices are possible also.&lt;/p&gt;
&lt;h2&gt;What MLO then does&lt;/h2&gt;
&lt;p&gt;The U-Boot MLO initializes whatever PLLs, clocks, controllers and
RAM is necessary to get a working UART, external RAM and MMC device.
It is then able to load the full U-Boot from the MMC device into RAM
and execute it. Full U-Boot has much more peripheral support and
other supporting features to load the next step, i.e. the
operating system or application.&lt;/p&gt;
&lt;h2&gt;What we want so we can test RTEMS&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.goboek.nl/back-to-school-rtems-class.html"&gt;As mentioned&lt;/a&gt;, I am working on a
&lt;a href="http://www.rtems.org/wiki/index.php/Board_Support_Packages"&gt;BSP&lt;/a&gt; for the
&lt;a href="http://www.beagleboard.org"&gt;Beagle&lt;/a&gt; family of products for
&lt;a href="http://www.rtems.org"&gt;RTEMS&lt;/a&gt;. In other words, a port of RTEMS to the
beagles; specifically the BeagleBoard XM, BeagleBone 'White,' and the
BeagleBone Black.&lt;/p&gt;
&lt;p&gt;My friend &lt;a href="https://github.com/kiwichris"&gt;Chris&lt;/a&gt;, in testing
my BSP, has introduced me to the powerful notion of what I might
call running-from-scratch. Specifically, getting the hardware, after
reset, into a state where it can load and run an RTEMS binary, absent
a boot loader. This eliminates a lot of dependency on what kind of
state a bootloader might leave the hardware in. And it also eliminates
needing any external software to load &amp;amp; run RTEMS for unattended
testing. We have taken to doing this with 
&lt;a href="http://en.wikipedia.org/wiki/Joint_Test_Action_Group"&gt;JTAG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Running without boot code affords us full control. The full system
state is known, which has as advantage that once it works for us,
it should work everywhere. The bootloader is eliminated as a
dependency in determining the system state once the RTEMS binary
starts running. The disadvantage is that we have to figure out how
to load the RTEMS executable, and how to get the hardware into a
usable state without the help of MLO or U-Boot. We can do all this
with JTAG.&lt;/p&gt;
&lt;h2&gt;Initializing the board with JTAG&lt;/h2&gt;
&lt;p&gt;My approach has been to duplicate the initialization procedure that U-Boot
SPL (i.e. their MLO) does with JTAG. I executed it in qemu and traced all
memory i/o operations it uses to initialize the hardware. Then I could
recreate then in OpenOCD as a series of writes and so reset the board
and initialize it on every GDB attachment. Now we can run RTEMS
executables over JTAG without any additional software needed!&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/bengras/rtems/tree/beaglebone-wip"&gt;The RTEMS code is here&lt;/a&gt;. It contains
the OpenOCD configuration to initialize the beagleboard.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bengras/rtems-tools"&gt;The RTEMS tester code is here&lt;/a&gt;. It contains the
gdb configuration necessary to control OpenOCD properly to load &amp;amp; execute binaries, while
also setting the proper breakpoints to let the tests pass.&lt;/p&gt;
&lt;p&gt;I will post a full tutorial on how to build and run everything in the future.&lt;/p&gt;
&lt;h2&gt;Running RTEMS tests&lt;/h2&gt;
&lt;p&gt;The next step is to build and run all RTEMS tests on the Beagleboard XM
unattended. I will also post an update on how the tests are running.&lt;/p&gt;</content><category term="Blog"></category><category term="beagle"></category><category term="jtag"></category><category term="rtems"></category></entry><entry><title>Back to school - RTEMS Class</title><link href="https://www.goboek.nl/back-to-school-rtems-class.html" rel="alternate"></link><published>2014-04-22T13:31:00+02:00</published><updated>2014-04-22T13:31:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-04-22:/back-to-school-rtems-class.html</id><summary type="html">&lt;p&gt;I followed a class on the RTEMS OS and wrote a BSP for the Beagles for it in about that time.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.goboek.nl/i-want-to-get-into-rtems.html"&gt;As mentioned&lt;/a&gt;, I am interested in
diversifying my OS knowledge further.
&lt;a href="http://rtemsramblings.blogspot.nl/"&gt;Joel&lt;/a&gt; mentioned he was
teaching an &lt;a href="http://www.rtems.org"&gt;RTEMS&lt;/a&gt;
&lt;a href="http://rtems.org/wiki/index.php/RTEMS_Training"&gt;Open Class&lt;/a&gt;
in Munich last month so that was a perfect opportunity to take part.&lt;/p&gt;
&lt;p&gt;So I booked a flight, and AirBNB room, and there I was! Coffee,
pretzels (I get it now!), class, beer, food, hacking - heavenly
really.  It was a great experience. For many reasons!&lt;/p&gt;
&lt;h2&gt;Reasons the class was great, one: I learned a lot about RTEMS&lt;/h2&gt;
&lt;p&gt;Both usage and its internal structure, and real-time systems in general.
I had done some preparation beforehand so that I would get the most out of
the class, but both were something of a first for me.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Joel teaching" src="https://www.goboek.nl/images/joel-teach.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Pictured above: Joel in front of the projection screen.&lt;/p&gt;
&lt;h2&gt;Two: I got to socialize with Joel&lt;/h2&gt;
&lt;p&gt;He lives in the US so we don't see each other much. It was great to
catch up a bit and talk about subjects ranging from technical RTEMS
subjects, to life and happiness and such things in general.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Having a beer with Joel" src="https://www.goboek.nl/images/socialize.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Left: me. Right: Joel.&lt;/p&gt;
&lt;p&gt;We all know socializing is simply code for drinking
beer together, no?&lt;/p&gt;
&lt;h2&gt;Three: the Beagle BSP&lt;/h2&gt;
&lt;p&gt;Based on Joel's suggestion beforehand I had set myself the goal of
writing a &lt;a href="http://www.rtems.org/wiki/index.php/Board_Support_Packages"&gt;BSP&lt;/a&gt;
for the &lt;a href="http://www.beagleboard.org"&gt;Beagle&lt;/a&gt; family of products for
RTEMS. In other words, a port of RTEMS to the beagles; specifically
the BeagleBoard XM, BeagleBone 'White,' and the BeagleBone Black.
Joel mentioned this at the start of the 4-day class to the other
participants, so that raised the pressure to succeed within the class
timeframe significantly!&lt;/p&gt;
&lt;p&gt;I hacked on it as much as I could between classes and socializing and
"on the last day" I got it working. I really enjoyed Joel demonstrating
it to the rest of the class! We hooked up my laptop to the projector
and went to town.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Joel demonstrating RTEMS on my beaglebone black" src="https://www.goboek.nl/images/demo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Pictured: Joel demonstrating RTEMS running on the Beaglebone Black that
I brought with me.&lt;/p&gt;
&lt;p&gt;And, also on the last day:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Joel demonstrating RTEMS on my beaglebone black" src="https://www.goboek.nl/images/cert.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I got a certificate! It really did feel like going back to school and it
was quite a nice experience.&lt;/p&gt;
&lt;h2&gt;Where to go&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.rtems.org/wiki/index.php/Beagleboard"&gt;The Beagleboard XM RTEMS Wiki page&lt;/a&gt; contains something of a history of the RTEMS Beagleboard port. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/claas"&gt;Claas Ziemke&lt;/a&gt; started an RTEMS BSP for
the original Beagleboard for a GSOC project, so he wrote the basis
for that page. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kiwichris"&gt;Chris&lt;/a&gt; started the wonderfully-named section 
"Ben and Chris's Big Beagleboard Adventure" - I couldn't have phrased it
better, that's really what it feels like! Also sounds a bit like "Bill and Ted"
and I hope Chris meant it that way too.&lt;/p&gt;
&lt;p&gt;The work-in-progress code is at
&lt;a href="https://github.com/bengras/rtems/tree/beaglebone-wip"&gt;my github RTEMS fork&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What next, and: foreshadowing&lt;/h2&gt;
&lt;p&gt;I'm really delighted with how far the BSP has come, as it's a first
for me to do something with RTEMS, and indeed get any new OS working
almost-from-scratch on a new piece of hardware. Well.. That's an
exaggeration, as a lot of ARM support was already there. But still,
filling in a few more basics can make it feel like it's from-scratch!&lt;/p&gt;
&lt;p&gt;The Beagles are such nice products that it's a real PR opportunity
for RTEMS too I believe, and I'm thrilled to be able to contribute
that to RTEMS.&lt;/p&gt;
&lt;p&gt;I have spent a lot of time since then running the full test suite,
and cleaning up the BSP - mostly by minimizing it. Part of the
effort to merge this BSP with mainline is that I am working with
&lt;a href="https://github.com/kiwichris"&gt;Chris&lt;/a&gt; to get the RTEMS executable
running from scratch using
&lt;a href="http://en.wikipedia.org/wiki/Joint_Test_Action_Group"&gt;JTAG&lt;/a&gt;.  But
that is a topic of another, similarly exciting, post.&lt;/p&gt;</content><category term="Blog"></category><category term="beagle"></category><category term="rtems"></category></entry><entry><title>Minix builds on 22 Linux distros thanks to NetBSD's buildsystem</title><link href="https://www.goboek.nl/minix-builds-on-22-linux-distros-thanks-to-netbsds-buildsystem.html" rel="alternate"></link><published>2014-04-15T14:19:00+02:00</published><updated>2014-04-15T14:19:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-04-15:/minix-builds-on-22-linux-distros-thanks-to-netbsds-buildsystem.html</id><summary type="html">&lt;p&gt;I tried the Minix build procedure in many environments with relatively minimal effort using OpenSuse's build farm. Minix builds from scratch on many different OSes and Linux distributions. This is a testament to the power of its buildsystem, taken from NetBSD.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Why read on? To learn how &lt;a href="https://build.opensuse.org/package/show/home:beng-nl/Minix3"&gt;Minix could effortlessly crossbuild from all these environments&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Software that always works is pretty hard to achieve. It depends
on its own state and the state of its environment. Its own state
is hard enough to manage as it is. That of the environment, however,
is outside of its control alltogether. Whenever I use something that is
highly dependent on its environment, and it works without fiddling,
I'm always surprised and impressed and pleased. It's such a nice
experience.  Example: &lt;a href="http://www.sonos.com/"&gt;my SONOS players&lt;/a&gt;.
Phones nowadays (I use Androids) do a really good job of it too.
Apple also seems to invest a lot into the 'just works' experience
and it's impressive how often it does, in fact, just work.&lt;/p&gt;
&lt;p&gt;I've come to appreciate both the value of things that just work,
and the cost of getting things to just work, a lot, because I'm on
both sides of the fence. I co-provide a product that should work;
and I'm a consumer of many products that should work.  It's easy
to underestimate how much more complex something has to be if it
has to work for everyone, in any environment, compared to just for you. 
You got it working in your environment, after all.
I'd like it if Minix never had any build problems.  (Let's not talk
about run problems for now - that's much harder to measure.) But
we're a pretty small team so can't go down the &lt;a href="http://en.wikipedia.org/wiki/Long_tail"&gt;long
tail&lt;/a&gt; of reasons why builds
might break in many different environments.&lt;/p&gt;
&lt;p&gt;Minix can be cross-built for x86 or ARM and so relies on its host
environment to a degree. This can't be controlled, so to have a
robust build system that not only works but also doesn't break
easily is pretty hard. &lt;/p&gt;
&lt;p&gt;Fortunately we consciously decided to re-invent the wheel as little
as possible and so went with &lt;a href="http://www.netbsd.org/"&gt;NetBSD&lt;/a&gt;'s
build system. Their approach shows they recognize the same problem
and they solved it very neatly. All dependencies - from small
utilities like stat to a crossbuilding compiler and linker - can
be packaged along with the NetBSD source and built as `tools' before
NetBSD itself is. The build process then uses the tools and no host
commands. So the dependencies on the host environment are minimized.
This is crucial; just a simple utility like stat not taking exactly
the expected option and produce exactly the expected output could easily
break the whole build - often a hard-to-diagnose problem given the
on-the-surface symptoms.&lt;/p&gt;
&lt;p&gt;I should add that, powerful as the system is, it is not magical.
When used properly, the system provides reproducibility of builds
independent of the host environment.  This doesn't mean there are
no problems. It means the state is manageable and only minimally
dependent on the host environment.  In the best case, all problems
are solved just once. Once it is solved by the first person, someone
else shouldn't bump into it again. Even if the hosting environments
are different. Given how diverse such environments can be, that
does make it &lt;em&gt;quite magical&lt;/em&gt; as far as I'm concerned.&lt;/p&gt;
&lt;p&gt;The buildsystem has worked really well for Minix as well. Just to
see how well it does on many different Linux distros, I tried
crosscompiling x86 Minix on the &lt;a href="https://build.opensuse.org/"&gt;OpenSUSE's Build
Service&lt;/a&gt;.  It did take some tweaking,
mostly of package parameters like dependencies to get the tools
bootstrap going, but then 22 distros built Minix without changing
the build system itself; &lt;a href="https://build.opensuse.org/package/show/home:beng-nl/Minix3"&gt;here are the
results&lt;/a&gt;. Well
done NetBSD, and the Minix guys that work hard to cleanly integrate
it.&lt;/p&gt;</content><category term="Blog"></category><category term="minix"></category><category term="justworks"></category></entry><entry><title>So I installed Android on the Beaglebone Black</title><link href="https://www.goboek.nl/so-i-installed-android-on-the-beaglebone-black.html" rel="alternate"></link><published>2014-04-13T01:19:00+02:00</published><updated>2014-04-13T01:19:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-04-13:/so-i-installed-android-on-the-beaglebone-black.html</id><summary type="html">&lt;p&gt;The upcoming Android space shooter running on the Beaglebone Black for the first time.&lt;/p&gt;</summary><content type="html">&lt;p&gt;My friend Goran is doing a great job at writing a space shooter game
for Android. I like trying out new versions of his game on my phone
and on any other Android devices I can find to support him.&lt;/p&gt;
&lt;p&gt;I'm also a big lover of the line of Beagle ARM devices of course.
And as I recently learned that Android runs near-out-of-the-box on
the Beaglebone Black, I decided to run Goran's game on the BBB!&lt;/p&gt;
&lt;p&gt;So I followed &lt;a href="http://icculus.org/~hendersa/android/"&gt;these&lt;/a&gt;
instructions and installed the ready-made image on my BBB. A
few reboots to get USB devices working, and an adb install command
to install my friend's game later, and it was working!&lt;/p&gt;
&lt;p&gt;It's great to see how smoothly this software works on all kinds of
different devices. And to see the HDMI out on my BBB working on my
beamer in my living room.&lt;/p&gt;
&lt;p&gt;Here is a teaser of the android install booting.. the game isn't released
yet after all!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Game running on my beamer" src="https://www.goboek.nl/images/android-game.jpg"&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="android"></category><category term="bbb"></category></entry><entry><title>I want to get into RTEMS</title><link href="https://www.goboek.nl/i-want-to-get-into-rtems.html" rel="alternate"></link><published>2014-04-10T02:46:00+02:00</published><updated>2014-04-10T02:46:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-04-10:/i-want-to-get-into-rtems.html</id><summary type="html">&lt;p&gt;I really want to know everything about RTEMS.&lt;/p&gt;</summary><content type="html">&lt;p&gt;My day job is programming Minix. It has been for over 9 years.  I've
come to love it and systems programming in general. I've decided I
want to develop myself further in the field of systems programming.
It seems embedded systems is where commercial value and systems
programming meet, so that is what I want to develop.&lt;/p&gt;
&lt;p&gt;My friends Joel Sherril and Chris Johns are core members of the
RTEMS project, a very prestigious Realtime Embedded OS in the sense 
that it runs on highly safety- and reliability-critical systems
from NASA, JPL, ESA, CERN, BMW and many others we do and don't
know about. I'm in contact with them a lot lately in order to
learn more and contribute. RTEMS is the opposite of Minix, and that is a pleasant
change of pace and scenery really.&lt;/p&gt;</content><category term="Blog"></category><category term="rtems"></category></entry><entry><title>First post</title><link href="https://www.goboek.nl/first-post.html" rel="alternate"></link><published>2014-04-10T02:36:00+02:00</published><updated>2014-04-10T02:36:00+02:00</updated><author><name>René Kuiper</name></author><id>tag:www.goboek.nl,2014-04-10:/first-post.html</id><summary type="html">&lt;p&gt;I have started a blog and this is the first post for now.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first post on my new blog. I decided I wanted a blog after
all.&lt;/p&gt;
&lt;p&gt;And that I wanted a simple, robust way to make a good looking site
from simple input, that supports the blog format, and so came across
pelican. I'm still trying it out but I like how nice the site looks
for how simple the input is.&lt;/p&gt;</content><category term="Blog"></category><category term="pelican"></category></entry></feed>